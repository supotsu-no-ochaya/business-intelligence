name: Deploy to Production

on:
  push:
    branches:
      - main  # Trigger deployment when pushing to the main branch
  workflow_dispatch:  # Manually trigger workflow

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Set up Docker
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: ~/.cache/docker
        key: ${{ runner.os }}-docker-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Step 1: Build Backend Docker Image
    - name: Build Backend Docker Image
      run: |
        docker build -t ghcr.io/${{ github.repository }}/backend-prod:latest -f backend/Dockerfile_prod backend/

    # Step 2: Build Frontend Docker Image
    - name: Build Frontend Docker Image
      run: |
        docker build -t ghcr.io/${{ github.repository }}/frontend-prod:latest -f frontend/Dockerfile_prod frontend/

    # Step 3: Build PostgreSQL Docker Image (Optional)
    - name: Pull PostgreSQL Docker Image
      run: |
        docker pull postgres:latest  # Using the official PostgreSQL image

    # Step 4: Push Docker Images to GitHub Container Registry
    - name: Push Backend Docker Image
      run: |
        docker push ghcr.io/${{ github.repository }}/backend-prod:latest

    - name: Push Frontend Docker Image
      run: |
        docker push ghcr.io/${{ github.repository }}/frontend-prod:latest

    - name: Push PostgreSQL Docker Image (Optional)
      run: |
        docker tag postgres:latest ghcr.io/${{ github.repository }}/postgres-prod:latest
        docker push ghcr.io/${{ github.repository }}/postgres-prod:latest

    # Step 5: Deploy to Production Server (SSH deployment)
    #- name: Deploy to Production Server
    #  env:
    #    SERVER_USER: ${{ secrets.SERVER_USER }}
    #    SERVER_IP: ${{ secrets.SERVER_IP }}
    #    SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
    #  run: |
    #    echo "$SSH_PRIVATE_KEY" | ssh-add -
    #    ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP << 'EOF'
    #      cd /path/to/your/project
    #      docker-compose pull
    #      docker-compose up -d
    #    EOF
        
